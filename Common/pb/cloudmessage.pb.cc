// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cloudmessage.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "cloudmessage.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace cloudmessaging {

namespace {

const ::google::protobuf::Descriptor* CommonMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CommonMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* SizeMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SizeMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* PointerMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PointerMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* FunctionCallMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FunctionCallMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* TransferMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TransferMessage_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_cloudmessage_2eproto() {
  protobuf_AddDesc_cloudmessage_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "cloudmessage.proto");
  GOOGLE_CHECK(file != NULL);
  CommonMessage_descriptor_ = file->message_type(0);
  static const int CommonMessage_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonMessage, messagetype_),
  };
  CommonMessage_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CommonMessage_descriptor_,
      CommonMessage::default_instance_,
      CommonMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonMessage, _has_bits_[0]),
      -1,
      -1,
      sizeof(CommonMessage),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonMessage, _internal_metadata_),
      -1);
  SizeMessage_descriptor_ = file->message_type(1);
  static const int SizeMessage_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SizeMessage, messagetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SizeMessage, size_),
  };
  SizeMessage_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SizeMessage_descriptor_,
      SizeMessage::default_instance_,
      SizeMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SizeMessage, _has_bits_[0]),
      -1,
      -1,
      sizeof(SizeMessage),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SizeMessage, _internal_metadata_),
      -1);
  PointerMessage_descriptor_ = file->message_type(2);
  static const int PointerMessage_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PointerMessage, messagetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PointerMessage, pointer_),
  };
  PointerMessage_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PointerMessage_descriptor_,
      PointerMessage::default_instance_,
      PointerMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PointerMessage, _has_bits_[0]),
      -1,
      -1,
      sizeof(PointerMessage),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PointerMessage, _internal_metadata_),
      -1);
  FunctionCallMessage_descriptor_ = file->message_type(3);
  static const int FunctionCallMessage_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FunctionCallMessage, messagetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FunctionCallMessage, functiontype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FunctionCallMessage, argsmessage_),
  };
  FunctionCallMessage_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      FunctionCallMessage_descriptor_,
      FunctionCallMessage::default_instance_,
      FunctionCallMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FunctionCallMessage, _has_bits_[0]),
      -1,
      -1,
      sizeof(FunctionCallMessage),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FunctionCallMessage, _internal_metadata_),
      -1);
  TransferMessage_descriptor_ = file->message_type(4);
  static const int TransferMessage_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransferMessage, messagetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransferMessage, compresskind_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransferMessage, size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransferMessage, compressedsize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransferMessage, pointer_),
  };
  TransferMessage_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TransferMessage_descriptor_,
      TransferMessage::default_instance_,
      TransferMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransferMessage, _has_bits_[0]),
      -1,
      -1,
      sizeof(TransferMessage),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransferMessage, _internal_metadata_),
      -1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_cloudmessage_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CommonMessage_descriptor_, &CommonMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SizeMessage_descriptor_, &SizeMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PointerMessage_descriptor_, &PointerMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      FunctionCallMessage_descriptor_, &FunctionCallMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TransferMessage_descriptor_, &TransferMessage::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_cloudmessage_2eproto() {
  delete CommonMessage::default_instance_;
  delete CommonMessage_reflection_;
  delete SizeMessage::default_instance_;
  delete SizeMessage_reflection_;
  delete PointerMessage::default_instance_;
  delete PointerMessage_reflection_;
  delete FunctionCallMessage::default_instance_;
  delete FunctionCallMessage_reflection_;
  delete TransferMessage::default_instance_;
  delete TransferMessage_reflection_;
}

void protobuf_AddDesc_cloudmessage_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022cloudmessage.proto\022\016cloudmessaging\"$\n\r"
    "CommonMessage\022\023\n\013messagetype\030\001 \002(\005\"0\n\013Si"
    "zeMessage\022\023\n\013messagetype\030\001 \002(\005\022\014\n\004size\030\002"
    " \002(\005\"6\n\016PointerMessage\022\023\n\013messagetype\030\001 "
    "\002(\005\022\017\n\007pointer\030\002 \002(\003\"U\n\023FunctionCallMess"
    "age\022\023\n\013messagetype\030\001 \002(\005\022\024\n\014functiontype"
    "\030\002 \002(\005\022\023\n\013argsmessage\030\003 \002(\t\"s\n\017TransferM"
    "essage\022\023\n\013messagetype\030\001 \002(\005\022\024\n\014compressk"
    "ind\030\002 \002(\005\022\014\n\004size\030\003 \002(\005\022\026\n\016compressedsiz"
    "e\030\004 \002(\005\022\017\n\007pointer\030\005 \002(\003", 384);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "cloudmessage.proto", &protobuf_RegisterTypes);
  CommonMessage::default_instance_ = new CommonMessage();
  SizeMessage::default_instance_ = new SizeMessage();
  PointerMessage::default_instance_ = new PointerMessage();
  FunctionCallMessage::default_instance_ = new FunctionCallMessage();
  TransferMessage::default_instance_ = new TransferMessage();
  CommonMessage::default_instance_->InitAsDefaultInstance();
  SizeMessage::default_instance_->InitAsDefaultInstance();
  PointerMessage::default_instance_->InitAsDefaultInstance();
  FunctionCallMessage::default_instance_->InitAsDefaultInstance();
  TransferMessage::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_cloudmessage_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_cloudmessage_2eproto {
  StaticDescriptorInitializer_cloudmessage_2eproto() {
    protobuf_AddDesc_cloudmessage_2eproto();
  }
} static_descriptor_initializer_cloudmessage_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#ifndef _MSC_VER
const int CommonMessage::kMessagetypeFieldNumber;
#endif  // !_MSC_VER

CommonMessage::CommonMessage()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cloudmessaging.CommonMessage)
}

void CommonMessage::InitAsDefaultInstance() {
}

CommonMessage::CommonMessage(const CommonMessage& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cloudmessaging.CommonMessage)
}

void CommonMessage::SharedCtor() {
  _cached_size_ = 0;
  messagetype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CommonMessage::~CommonMessage() {
  // @@protoc_insertion_point(destructor:cloudmessaging.CommonMessage)
  SharedDtor();
}

void CommonMessage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CommonMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommonMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommonMessage_descriptor_;
}

const CommonMessage& CommonMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cloudmessage_2eproto();
  return *default_instance_;
}

CommonMessage* CommonMessage::default_instance_ = NULL;

CommonMessage* CommonMessage::New(::google::protobuf::Arena* arena) const {
  CommonMessage* n = new CommonMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CommonMessage::Clear() {
  messagetype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CommonMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cloudmessaging.CommonMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 messagetype = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &messagetype_)));
          set_has_messagetype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cloudmessaging.CommonMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cloudmessaging.CommonMessage)
  return false;
#undef DO_
}

void CommonMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cloudmessaging.CommonMessage)
  // required int32 messagetype = 1;
  if (has_messagetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->messagetype(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cloudmessaging.CommonMessage)
}

::google::protobuf::uint8* CommonMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cloudmessaging.CommonMessage)
  // required int32 messagetype = 1;
  if (has_messagetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->messagetype(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cloudmessaging.CommonMessage)
  return target;
}

int CommonMessage::ByteSize() const {
  int total_size = 0;

  // required int32 messagetype = 1;
  if (has_messagetype()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->messagetype());
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommonMessage::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CommonMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CommonMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CommonMessage::MergeFrom(const CommonMessage& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_messagetype()) {
      set_messagetype(from.messagetype());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CommonMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommonMessage::CopyFrom(const CommonMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommonMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CommonMessage::Swap(CommonMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CommonMessage::InternalSwap(CommonMessage* other) {
  std::swap(messagetype_, other->messagetype_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CommonMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CommonMessage_descriptor_;
  metadata.reflection = CommonMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SizeMessage::kMessagetypeFieldNumber;
const int SizeMessage::kSizeFieldNumber;
#endif  // !_MSC_VER

SizeMessage::SizeMessage()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cloudmessaging.SizeMessage)
}

void SizeMessage::InitAsDefaultInstance() {
}

SizeMessage::SizeMessage(const SizeMessage& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cloudmessaging.SizeMessage)
}

void SizeMessage::SharedCtor() {
  _cached_size_ = 0;
  messagetype_ = 0;
  size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SizeMessage::~SizeMessage() {
  // @@protoc_insertion_point(destructor:cloudmessaging.SizeMessage)
  SharedDtor();
}

void SizeMessage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SizeMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SizeMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SizeMessage_descriptor_;
}

const SizeMessage& SizeMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cloudmessage_2eproto();
  return *default_instance_;
}

SizeMessage* SizeMessage::default_instance_ = NULL;

SizeMessage* SizeMessage::New(::google::protobuf::Arena* arena) const {
  SizeMessage* n = new SizeMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SizeMessage::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<SizeMessage*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(messagetype_, size_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool SizeMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cloudmessaging.SizeMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 messagetype = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &messagetype_)));
          set_has_messagetype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_size;
        break;
      }

      // required int32 size = 2;
      case 2: {
        if (tag == 16) {
         parse_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &size_)));
          set_has_size();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cloudmessaging.SizeMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cloudmessaging.SizeMessage)
  return false;
#undef DO_
}

void SizeMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cloudmessaging.SizeMessage)
  // required int32 messagetype = 1;
  if (has_messagetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->messagetype(), output);
  }

  // required int32 size = 2;
  if (has_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->size(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cloudmessaging.SizeMessage)
}

::google::protobuf::uint8* SizeMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cloudmessaging.SizeMessage)
  // required int32 messagetype = 1;
  if (has_messagetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->messagetype(), target);
  }

  // required int32 size = 2;
  if (has_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->size(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cloudmessaging.SizeMessage)
  return target;
}

int SizeMessage::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_messagetype()) {
    // required int32 messagetype = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->messagetype());
  }

  if (has_size()) {
    // required int32 size = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->size());
  }

  return total_size;
}
int SizeMessage::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int32 messagetype = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->messagetype());

    // required int32 size = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->size());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SizeMessage::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const SizeMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SizeMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SizeMessage::MergeFrom(const SizeMessage& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_messagetype()) {
      set_messagetype(from.messagetype());
    }
    if (from.has_size()) {
      set_size(from.size());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void SizeMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SizeMessage::CopyFrom(const SizeMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SizeMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void SizeMessage::Swap(SizeMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SizeMessage::InternalSwap(SizeMessage* other) {
  std::swap(messagetype_, other->messagetype_);
  std::swap(size_, other->size_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SizeMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SizeMessage_descriptor_;
  metadata.reflection = SizeMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PointerMessage::kMessagetypeFieldNumber;
const int PointerMessage::kPointerFieldNumber;
#endif  // !_MSC_VER

PointerMessage::PointerMessage()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cloudmessaging.PointerMessage)
}

void PointerMessage::InitAsDefaultInstance() {
}

PointerMessage::PointerMessage(const PointerMessage& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cloudmessaging.PointerMessage)
}

void PointerMessage::SharedCtor() {
  _cached_size_ = 0;
  messagetype_ = 0;
  pointer_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PointerMessage::~PointerMessage() {
  // @@protoc_insertion_point(destructor:cloudmessaging.PointerMessage)
  SharedDtor();
}

void PointerMessage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PointerMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PointerMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PointerMessage_descriptor_;
}

const PointerMessage& PointerMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cloudmessage_2eproto();
  return *default_instance_;
}

PointerMessage* PointerMessage::default_instance_ = NULL;

PointerMessage* PointerMessage::New(::google::protobuf::Arena* arena) const {
  PointerMessage* n = new PointerMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PointerMessage::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<PointerMessage*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(pointer_, messagetype_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool PointerMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cloudmessaging.PointerMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 messagetype = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &messagetype_)));
          set_has_messagetype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_pointer;
        break;
      }

      // required int64 pointer = 2;
      case 2: {
        if (tag == 16) {
         parse_pointer:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &pointer_)));
          set_has_pointer();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cloudmessaging.PointerMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cloudmessaging.PointerMessage)
  return false;
#undef DO_
}

void PointerMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cloudmessaging.PointerMessage)
  // required int32 messagetype = 1;
  if (has_messagetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->messagetype(), output);
  }

  // required int64 pointer = 2;
  if (has_pointer()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->pointer(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cloudmessaging.PointerMessage)
}

::google::protobuf::uint8* PointerMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cloudmessaging.PointerMessage)
  // required int32 messagetype = 1;
  if (has_messagetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->messagetype(), target);
  }

  // required int64 pointer = 2;
  if (has_pointer()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->pointer(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cloudmessaging.PointerMessage)
  return target;
}

int PointerMessage::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_messagetype()) {
    // required int32 messagetype = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->messagetype());
  }

  if (has_pointer()) {
    // required int64 pointer = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->pointer());
  }

  return total_size;
}
int PointerMessage::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int32 messagetype = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->messagetype());

    // required int64 pointer = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->pointer());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PointerMessage::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const PointerMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PointerMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PointerMessage::MergeFrom(const PointerMessage& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_messagetype()) {
      set_messagetype(from.messagetype());
    }
    if (from.has_pointer()) {
      set_pointer(from.pointer());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void PointerMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PointerMessage::CopyFrom(const PointerMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PointerMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void PointerMessage::Swap(PointerMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PointerMessage::InternalSwap(PointerMessage* other) {
  std::swap(messagetype_, other->messagetype_);
  std::swap(pointer_, other->pointer_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PointerMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PointerMessage_descriptor_;
  metadata.reflection = PointerMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FunctionCallMessage::kMessagetypeFieldNumber;
const int FunctionCallMessage::kFunctiontypeFieldNumber;
const int FunctionCallMessage::kArgsmessageFieldNumber;
#endif  // !_MSC_VER

FunctionCallMessage::FunctionCallMessage()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cloudmessaging.FunctionCallMessage)
}

void FunctionCallMessage::InitAsDefaultInstance() {
}

FunctionCallMessage::FunctionCallMessage(const FunctionCallMessage& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cloudmessaging.FunctionCallMessage)
}

void FunctionCallMessage::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  messagetype_ = 0;
  functiontype_ = 0;
  argsmessage_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FunctionCallMessage::~FunctionCallMessage() {
  // @@protoc_insertion_point(destructor:cloudmessaging.FunctionCallMessage)
  SharedDtor();
}

void FunctionCallMessage::SharedDtor() {
  argsmessage_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void FunctionCallMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FunctionCallMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FunctionCallMessage_descriptor_;
}

const FunctionCallMessage& FunctionCallMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cloudmessage_2eproto();
  return *default_instance_;
}

FunctionCallMessage* FunctionCallMessage::default_instance_ = NULL;

FunctionCallMessage* FunctionCallMessage::New(::google::protobuf::Arena* arena) const {
  FunctionCallMessage* n = new FunctionCallMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FunctionCallMessage::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<FunctionCallMessage*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(messagetype_, functiontype_);
    if (has_argsmessage()) {
      argsmessage_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool FunctionCallMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cloudmessaging.FunctionCallMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 messagetype = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &messagetype_)));
          set_has_messagetype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_functiontype;
        break;
      }

      // required int32 functiontype = 2;
      case 2: {
        if (tag == 16) {
         parse_functiontype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &functiontype_)));
          set_has_functiontype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_argsmessage;
        break;
      }

      // required string argsmessage = 3;
      case 3: {
        if (tag == 26) {
         parse_argsmessage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_argsmessage()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->argsmessage().data(), this->argsmessage().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "cloudmessaging.FunctionCallMessage.argsmessage");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cloudmessaging.FunctionCallMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cloudmessaging.FunctionCallMessage)
  return false;
#undef DO_
}

void FunctionCallMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cloudmessaging.FunctionCallMessage)
  // required int32 messagetype = 1;
  if (has_messagetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->messagetype(), output);
  }

  // required int32 functiontype = 2;
  if (has_functiontype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->functiontype(), output);
  }

  // required string argsmessage = 3;
  if (has_argsmessage()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->argsmessage().data(), this->argsmessage().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "cloudmessaging.FunctionCallMessage.argsmessage");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->argsmessage(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cloudmessaging.FunctionCallMessage)
}

::google::protobuf::uint8* FunctionCallMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cloudmessaging.FunctionCallMessage)
  // required int32 messagetype = 1;
  if (has_messagetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->messagetype(), target);
  }

  // required int32 functiontype = 2;
  if (has_functiontype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->functiontype(), target);
  }

  // required string argsmessage = 3;
  if (has_argsmessage()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->argsmessage().data(), this->argsmessage().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "cloudmessaging.FunctionCallMessage.argsmessage");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->argsmessage(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cloudmessaging.FunctionCallMessage)
  return target;
}

int FunctionCallMessage::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_messagetype()) {
    // required int32 messagetype = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->messagetype());
  }

  if (has_functiontype()) {
    // required int32 functiontype = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->functiontype());
  }

  if (has_argsmessage()) {
    // required string argsmessage = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->argsmessage());
  }

  return total_size;
}
int FunctionCallMessage::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required int32 messagetype = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->messagetype());

    // required int32 functiontype = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->functiontype());

    // required string argsmessage = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->argsmessage());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FunctionCallMessage::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const FunctionCallMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FunctionCallMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FunctionCallMessage::MergeFrom(const FunctionCallMessage& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_messagetype()) {
      set_messagetype(from.messagetype());
    }
    if (from.has_functiontype()) {
      set_functiontype(from.functiontype());
    }
    if (from.has_argsmessage()) {
      set_has_argsmessage();
      argsmessage_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.argsmessage_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void FunctionCallMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FunctionCallMessage::CopyFrom(const FunctionCallMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FunctionCallMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void FunctionCallMessage::Swap(FunctionCallMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FunctionCallMessage::InternalSwap(FunctionCallMessage* other) {
  std::swap(messagetype_, other->messagetype_);
  std::swap(functiontype_, other->functiontype_);
  argsmessage_.Swap(&other->argsmessage_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FunctionCallMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FunctionCallMessage_descriptor_;
  metadata.reflection = FunctionCallMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TransferMessage::kMessagetypeFieldNumber;
const int TransferMessage::kCompresskindFieldNumber;
const int TransferMessage::kSizeFieldNumber;
const int TransferMessage::kCompressedsizeFieldNumber;
const int TransferMessage::kPointerFieldNumber;
#endif  // !_MSC_VER

TransferMessage::TransferMessage()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cloudmessaging.TransferMessage)
}

void TransferMessage::InitAsDefaultInstance() {
}

TransferMessage::TransferMessage(const TransferMessage& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cloudmessaging.TransferMessage)
}

void TransferMessage::SharedCtor() {
  _cached_size_ = 0;
  messagetype_ = 0;
  compresskind_ = 0;
  size_ = 0;
  compressedsize_ = 0;
  pointer_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TransferMessage::~TransferMessage() {
  // @@protoc_insertion_point(destructor:cloudmessaging.TransferMessage)
  SharedDtor();
}

void TransferMessage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TransferMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TransferMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TransferMessage_descriptor_;
}

const TransferMessage& TransferMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cloudmessage_2eproto();
  return *default_instance_;
}

TransferMessage* TransferMessage::default_instance_ = NULL;

TransferMessage* TransferMessage::New(::google::protobuf::Arena* arena) const {
  TransferMessage* n = new TransferMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TransferMessage::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TransferMessage*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(messagetype_, pointer_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool TransferMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cloudmessaging.TransferMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 messagetype = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &messagetype_)));
          set_has_messagetype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_compresskind;
        break;
      }

      // required int32 compresskind = 2;
      case 2: {
        if (tag == 16) {
         parse_compresskind:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &compresskind_)));
          set_has_compresskind();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_size;
        break;
      }

      // required int32 size = 3;
      case 3: {
        if (tag == 24) {
         parse_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &size_)));
          set_has_size();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_compressedsize;
        break;
      }

      // required int32 compressedsize = 4;
      case 4: {
        if (tag == 32) {
         parse_compressedsize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &compressedsize_)));
          set_has_compressedsize();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_pointer;
        break;
      }

      // required int64 pointer = 5;
      case 5: {
        if (tag == 40) {
         parse_pointer:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &pointer_)));
          set_has_pointer();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cloudmessaging.TransferMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cloudmessaging.TransferMessage)
  return false;
#undef DO_
}

void TransferMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cloudmessaging.TransferMessage)
  // required int32 messagetype = 1;
  if (has_messagetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->messagetype(), output);
  }

  // required int32 compresskind = 2;
  if (has_compresskind()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->compresskind(), output);
  }

  // required int32 size = 3;
  if (has_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->size(), output);
  }

  // required int32 compressedsize = 4;
  if (has_compressedsize()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->compressedsize(), output);
  }

  // required int64 pointer = 5;
  if (has_pointer()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->pointer(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cloudmessaging.TransferMessage)
}

::google::protobuf::uint8* TransferMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cloudmessaging.TransferMessage)
  // required int32 messagetype = 1;
  if (has_messagetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->messagetype(), target);
  }

  // required int32 compresskind = 2;
  if (has_compresskind()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->compresskind(), target);
  }

  // required int32 size = 3;
  if (has_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->size(), target);
  }

  // required int32 compressedsize = 4;
  if (has_compressedsize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->compressedsize(), target);
  }

  // required int64 pointer = 5;
  if (has_pointer()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->pointer(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cloudmessaging.TransferMessage)
  return target;
}

int TransferMessage::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_messagetype()) {
    // required int32 messagetype = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->messagetype());
  }

  if (has_compresskind()) {
    // required int32 compresskind = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->compresskind());
  }

  if (has_size()) {
    // required int32 size = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->size());
  }

  if (has_compressedsize()) {
    // required int32 compressedsize = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->compressedsize());
  }

  if (has_pointer()) {
    // required int64 pointer = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->pointer());
  }

  return total_size;
}
int TransferMessage::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x0000001f) ^ 0x0000001f) == 0) {  // All required fields are present.
    // required int32 messagetype = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->messagetype());

    // required int32 compresskind = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->compresskind());

    // required int32 size = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->size());

    // required int32 compressedsize = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->compressedsize());

    // required int64 pointer = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->pointer());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TransferMessage::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const TransferMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TransferMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TransferMessage::MergeFrom(const TransferMessage& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_messagetype()) {
      set_messagetype(from.messagetype());
    }
    if (from.has_compresskind()) {
      set_compresskind(from.compresskind());
    }
    if (from.has_size()) {
      set_size(from.size());
    }
    if (from.has_compressedsize()) {
      set_compressedsize(from.compressedsize());
    }
    if (from.has_pointer()) {
      set_pointer(from.pointer());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void TransferMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransferMessage::CopyFrom(const TransferMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransferMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void TransferMessage::Swap(TransferMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TransferMessage::InternalSwap(TransferMessage* other) {
  std::swap(messagetype_, other->messagetype_);
  std::swap(compresskind_, other->compresskind_);
  std::swap(size_, other->size_);
  std::swap(compressedsize_, other->compressedsize_);
  std::swap(pointer_, other->pointer_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TransferMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TransferMessage_descriptor_;
  metadata.reflection = TransferMessage_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace cloudmessaging

// @@protoc_insertion_point(global_scope)
